---
import "../styles/index.css";
import { getEntryValueString } from "../helpers/form-data";
import { parseRegisterForm } from "../helpers/validation";

let errors, payload;
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  const result = parseRegisterForm(formData);
  if (result.values) {
    // todo: persist
    return Astro.redirect("/");
  }

  errors = result.errors;
  payload = {
    "first-name": getEntryValueString(formData.get("first-name")),
    "last-name": getEntryValueString(formData.get("last-name")),
    "email-address": getEntryValueString(formData.get("email-address")),
    // no password
  };
}
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- displays site properly based on user's device -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="./images/favicon-32x32.png"
    />
    <title>Frontend Mentor | Intro component with sign up form</title>
  </head>
  <body>
    <main>
      <div class="intro">
        <h1>Learn to code by watching others</h1>
        <p>
          See how experienced developers solve problems in real-time. Watching
          scripted tutorials is great, but understanding how developers think is
          invaluable.
        </p>
      </div>
      <div>
        <h2 class="sr-only">Claim your free trial</h2>
        <p class="pricing">
          <strong>Try it free 7 days</strong> then $20/mo. thereafter
        </p>
        <form id="register-form" method="post" novalidate>
          <label class="sr-only" for="first-name">First Name</label>
          <input
            id="first-name"
            type="text"
            name="first-name"
            autocomplete="given-name"
            required
            placeholder="First Name"
            value={payload?.["first-name"]}
            autofocus={!!errors?.["first-name"]}
            aria-describedby="first-name-error"
            aria-invalid={!!errors?.["first-name"]}
          />
          <p id="first-name-error">{errors?.["first-name"]}</p>
          <label class="sr-only" for="last-name">Last Name</label>
          <input
            id="last-name"
            type="text"
            name="last-name"
            autocomplete="family-name"
            required
            placeholder="Last Name"
            value={payload?.["last-name"]}
            autofocus={!!errors?.["last-name"]}
            aria-describedby="last-name-error"
            aria-invalid={!!errors?.["last-name"]}
          />
          <p id="last-name-error">{errors?.["last-name"]}</p>
          <label class="sr-only" for="email-address">Email Address</label>
          <input
            id="email-address"
            type="email"
            name="email-address"
            autocomplete="email"
            required
            placeholder="Email Address"
            value={payload?.["email-address"]}
            autofocus={!!errors?.["email-address"]}
            aria-describedby="email-address-error"
            aria-invalid={!!errors?.["email-address"]}
          />
          <p id="email-address-error">{errors?.["email-address"]}</p>
          <label class="sr-only" for="password">Password</label>
          <input
            id="password"
            type="password"
            name="password"
            autocomplete="new-password"
            required
            placeholder="Password"
            autofocus={!!errors?.["password"]}
            aria-describedby="password-error"
            aria-invalid={!!errors?.["password"]}
          />
          <p id="password-error">{errors?.["password"]}</p>
          <button type="submit" aria-describedby="agreement"
            >Claim your free trial</button
          >
          <small id="agreement">
            By clicking the button, you are agreeing to our <a href="#"
              >Terms and Services</a
            >
          </small>
        </form>
      </div>
    </main>
  </body>
</html>

<script>
  import { getElementById } from "../helpers/dom";
  import { parseRegisterForm } from "../helpers/validation";

  const dom = {
    form: getElementById("register-form", HTMLFormElement),
    fields: {
      "first-name": {
        input: getElementById("first-name", HTMLInputElement),
        description: getElementById("first-name-error", HTMLElement),
      },
      "last-name": {
        input: getElementById("last-name", HTMLInputElement),
        description: getElementById("last-name-error", HTMLElement),
      },
      "email-address": {
        input: getElementById("email-address", HTMLInputElement),
        description: getElementById("email-address-error", HTMLElement),
      },
      password: {
        input: getElementById("password", HTMLInputElement),
        description: getElementById("password-error", HTMLElement),
      },
    },
  };

  dom.form.addEventListener("submit", function (e) {
    const { errors } = parseRegisterForm(new FormData(dom.form));

    if (errors) {
      Object.entries(dom.fields).forEach(([name, field]) => {
        const error = errors[name as keyof (typeof dom)["fields"]];
        setError(field, error);
      });
      e.preventDefault();
    }
  });

  const setError = (
    field: (typeof dom)["fields"][keyof (typeof dom)["fields"]],
    error: string | undefined
  ) => {
    if (error) {
      field.input.setAttribute("aria-invalid", "true");
      field.description.textContent = error;
    } else {
      field.input.setAttribute("aria-invalid", "false");
      field.description.textContent = "";
    }
  };
</script>
