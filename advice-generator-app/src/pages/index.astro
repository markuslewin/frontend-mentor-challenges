---
import "@fontsource/manrope/variable.css";
import "../styles/base.css";
import { getAdvice } from "../helpers/advice";

let adviceObject = {
  slip: {
    id: 117,
    advice:
      "It is easy to sit up and take notice, what's difficult is getting up and taking action.",
  },
};

const { searchParams } = new URL(Astro.request.url);
if (searchParams.has("new")) {
  adviceObject = await getAdvice();
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/images/favicon-32x32.png"
    />
    <title>Frontend Mentor | Advice generator app</title>
  </head>
  <body>
    <main class="min-h-screen grid place-items-center p-4">
      <article class="max-w-135 text-center">
        <form data-generator>
          <article
            class="bg-dark-grayish-blue pt-10 px-8 pb-16 md:pb-18 -mb-8 rounded-xl md:rounded-2xl shadow-layer shadow-black forced-colors:border-2"
          >
            <h1 class="mb-6">
              Advice #<span data-generator-id>{adviceObject.slip.id}</span>
            </h1>
            <blockquote class="mb-6 md:mb-10">
              “<span data-generator-advice>{adviceObject.slip.advice}</span>”
            </blockquote>
            <svg
              class="md:hidden w-full h-4 forced-colors:bucket"
              aria-hidden="true"
              viewBox="0 0 295 16"
              xmlns="http://www.w3.org/2000/svg"
              ><g fill="none" fill-rule="evenodd"
                ><path fill="#4F5D74" d="M0 8h122v1H0zM173 8h122v1H173z"
                ></path><g transform="translate(138)" fill="#CEE3E9"
                  ><rect width="6" height="16" rx="3"></rect><rect
                    x="14"
                    width="6"
                    height="16"
                    rx="3"></rect></g
                ></g
              ></svg
            >
            <svg
              class="hidden md:block w-full h-4 forced-colors:bucket"
              aria-hidden="true"
              viewBox="0 0 444 16"
              xmlns="http://www.w3.org/2000/svg"
              ><g fill="none" fill-rule="evenodd"
                ><path fill="#4F5D74" d="M0 8h196v1H0zM248 8h196v1H248z"
                ></path><g transform="translate(212)" fill="#CEE3E9"
                  ><rect width="6" height="16" rx="3"></rect><rect
                    x="14"
                    width="6"
                    height="16"
                    rx="3"></rect></g
                ></g
              ></svg
            >
          </article>
          <footer>
            <button
              class="bg-neon-green rounded-full p-5 transition-shadow hover:shadow-glow focus-visible:shadow-glow hover:shadow-neon-green focus-visible:shadow-neon-green forced-colors:border-2"
              name="new"
            >
              <svg
                class="w-6 forced-colors:bucket"
                aria-hidden="true"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  d="M20 0H4a4.005 4.005 0 0 0-4 4v16a4.005 4.005 0 0 0 4 4h16a4.005 4.005 0 0 0 4-4V4a4.005 4.005 0 0 0-4-4ZM7.5 18a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0-9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm4.5 4.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm4.5 4.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0-9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z"
                  fill="#202733"></path></svg
              >
              <span class="sr-only">Generate a new piece of advice</span>
            </button>
          </footer>
        </form>
      </article>
    </main>
  </body>
</html>
<script>
  import { getAdvice } from "../helpers/advice";

  [...document.querySelectorAll("[data-generator]")].forEach((generator) => {
    generator.addEventListener("submit", async (event) => {
      event.preventDefault();

      try {
        if (controller !== undefined) {
          controller.abort();
        }
        controller = new AbortController();
        const adviceObject = await getAdvice({ signal: controller.signal });

        if (!(event.target instanceof Element)) {
          return;
        }

        [...event.target.querySelectorAll("[data-generator-id]")].forEach(
          (idEl) => {
            idEl.textContent = adviceObject.slip.id.toString();
          }
        );
        [...event.target.querySelectorAll("[data-generator-advice]")].forEach(
          (adviceEl) => {
            adviceEl.textContent = adviceObject.slip.advice;
          }
        );
      } catch (e) {
        if (e instanceof DOMException && e.name === "AbortError") {
          return;
        }
        throw e;
      }
    });
  });

  let controller: AbortController | undefined;
</script>
