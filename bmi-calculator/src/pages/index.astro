---
import "../styles/global.css";
import MetricControls from "../components/metric-controls.astro";
import RadioButton from "../components/radio-button.astro";
import TextField from "../components/text-field.astro";
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="./assets/images/favicon-32x32.png"
    />
    <title>Frontend Mentor | Body Mass Index Calculator</title>
  </head>
  <body
    class="bg-pure-white pb-24 font-inter text-body-m text-dark-electric-blue desktop:pb-32"
  >
    <header
      class="relative mx-auto box-content max-w-outer pt-8 before:absolute before:top-0 before:-z-10 before:block before:h-hero-decoration before:w-full before:rounded-b-9 before:bg-gradient-to-br before:from-gradient-1-from before:to-gradient-1-to before:content-[''] forced-colors:before:border-1 forced-colors:before:border-solid desktop:pt-20 desktop:before:h-hero-decoration-desktop desktop:before:max-w-hero-decoration"
    >
      <div class="mx-auto box-content max-w-inner px-6 tablet:px-10">
        <img
          class="mx-auto desktop:ml-0"
          alt="BMI calculator"
          src="/assets/images/logo.svg"
        />
      </div>
    </header>
    <main class="mt-6 tablet:mt-10 desktop:mt-7">
      <div
        class="mx-auto box-content max-w-inner px-6 tablet:px-10 desktop:grid desktop:grid-cols-2 desktop:gap-8"
      >
        <div
          class="mt-20 text-center desktop:max-w-section-text desktop:text-start"
        >
          <h1 class="text-heading-l text-gunmetal desktop:text-heading-xl">
            Body Mass Index Calculator
          </h1>
          <p class="mt-6 desktop:mt-9">
            Better understand your weight in relation to your height using our
            body mass index (BM) calculator. While BMI is not the sole
            determinant of a healthy weight, it offers a valuable starting point
            to evaluate your overall health and well-being.
          </p>
        </div>
        <section
          class="mt-12 rounded-4 bg-pure-white p-6 text-gunmetal shadow-layer-1 forced-colors:border-1 forced-colors:border-solid tablet:mt-10 tablet:p-8 desktop:mt-0"
          aria-labelledby="calculator"
        >
          <h2 class="text-heading-m text-gunmetal" id="calculator">
            Enter your details below
          </h2>
          <form class="mt-6 tablet:mt-8" id="calculator-form">
            <fieldset class="m-0 grid grid-cols-2 gap-6 border-none p-0">
              <legend class="sr-only">Units</legend>
              <RadioButton
                label="Metric"
                name="units"
                value="metric"
                required
                checked
              />
              <RadioButton
                label="Imperial"
                name="units"
                value="imperial"
                required
              />
            </fieldset>
            <div data-form-controls>
              <MetricControls />
            </div>
            <button class="sr-only" type="submit">Submit</button>
          </form>
          <div
            class="mt-6 rounded-4 bg-gradient-to-r from-blue to-gradient-result-to p-8 text-body-s text-pure-white forced-colors:border-1 forced-colors:border-solid tablet:mt-8 tablet:grid tablet:grid-cols-2 tablet:items-center tablet:gap-6 tablet:rounded-result tablet:rounded-e-full"
          >
            <h3 class="text-body-m-bold">
              Your BMI is... <strong
                class="mt-2 block text-heading-l desktop:text-heading-xl"
                data-form-result-bmi>23.4</strong
              >
            </h3>
            <p class="mt-6 tablet:mt-0">
              Your BMI suggests you're <span data-form-result-classification
                >a healthy weight</span
              >. Your ideal weight is between <strong
                class="font-semi-bold"
                data-form-result-ideal>63.3kgs - 85.2kgs</strong
              >.
            </p>
          </div>
        </section>
      </div>
      <div
        class="mx-auto mt-20 box-content max-w-inner tablet:mt-24 tablet:grid tablet:grid-cols-2 tablet:items-center tablet:gap-6 desktop:mt-44 desktop:items-end desktop:gap-8 desktop:px-10"
      >
        <div
          class="tablet:flex tablet:justify-end tablet:overflow-x-hidden desktop:block desktop:overflow-x-visible"
        >
          <img
            class="tablet:relative tablet:right-12 tablet:w-96 tablet:max-w-none desktop:static desktop:w-auto desktop:max-w-full desktop:justify-self-auto"
            alt=""
            src="/assets/images/image-man-eating.webp"
          />
        </div>
        <div
          class="mt-12 px-6 tablet:mt-0 tablet:px-0 tablet:pr-10 desktop:mb-10 desktop:max-w-section-text desktop:justify-self-end desktop:px-0"
        >
          <h2 class="text-heading-l-m text-gunmetal desktop:text-heading-l">
            What your BMI result means
          </h2>
          <p class="mt-8 desktop:mt-9">
            A BMI range of 18.5 to 24.9 is considered a 'healthy weight.'
            Maintaining a healthy weight may lower your chances of experiencing
            health issues later on, such as obesity and type 2 diabetes. Aim for
            a nutritious diet with reduced fat and sugar content, incorporating
            ample fruits and vegetables. Additionally, strive for regular
            physical activity, ideally about 30 minutes daily for five days a
            week.
          </p>
        </div>
      </div>
      <div
        class="mx-auto mt-20 box-content max-w-outer bg-gradient-to-br from-gradient-1-from to-gradient-1-to/25 py-14 forced-colors:border-1 forced-colors:border-solid tablet:mt-24 tablet:py-16 desktop:rounded-9 desktop:py-20 desktop:pb-24"
      >
        <div class="mx-auto box-content max-w-inner px-6 tablet:px-10">
          <h2 class="sr-only">Ways to maintain a healthy BMI</h2>
          <div class="flex flex-col gap-10 desktop:flex-row desktop:gap-8">
            {
              [
                {
                  icon: "/assets/images/icon-eating.svg",
                  heading: "Healthy eating",
                  text: "Healthy eating promotes weight control, disease prevention, better digestion, immunity, mental clarity, and mood.",
                },
                {
                  icon: "/assets/images/icon-exercise.svg",
                  heading: "Regular exercise",
                  text: "Exercise improves fitness, aids weight control, elevates mood, and reduces disease risk, fostering wellness and longevity.",
                },
                {
                  icon: "/assets/images/icon-sleep.svg",
                  heading: "Adequate sleep",
                  text: "Sleep enhances mental clarity, emotional stability, and physical wellness, promoting overall restoration and rejuvenation.",
                },
              ].map((way) => {
                return (
                  <article class="flex-1 tablet:flex tablet:items-center tablet:gap-10 desktop:block">
                    <img class="shrink-0" alt="" src={way.icon} />
                    <div>
                      <h3 class="mt-8 text-heading-m text-gunmetal tablet:mt-0 desktop:mt-11">
                        {way.heading}
                      </h3>
                      <p class="mt-6">{way.text}</p>
                    </div>
                  </article>
                );
              })
            }
          </div>
        </div>
      </div>
      <div
        class="mx-auto mt-20 box-content grid max-w-inner gap-4 px-6 tablet:mt-24 tablet:grid-cols-4 tablet:gap-6 tablet:gap-x-4 tablet:px-10 desktop:mt-32 desktop:grid-cols-6 desktop:gap-8"
      >
        <div
          class="mb-10 text-center tablet:col-span-4 tablet:mb-8 desktop:col-span-3 desktop:text-start"
        >
          <h2 class="text-heading-l-m text-gunmetal desktop:text-heading-l">
            Limitations of BMI
          </h2>
          <p class="mt-8 desktop:mt-9">
            Although BMI is often a practical indicator of healthy weight, it is
            not suited for every person. Specific groups should carefully
            consider their BMI outcomes, and in certain cases, the measurement
            may not be beneficial to use.
          </p>
        </div>
        {
          [
            {
              id: "gender",
              icon: "/assets/images/icon-gender.svg",
              heading: "Gender",
              text: "The development and body fat composition of girls and boys vary with age. Consequently, a child's age and gender are considered when evaluating their BMI.",
            },
            {
              id: "age",
              icon: "/assets/images/icon-age.svg",
              heading: "Age",
              text: "In aging individuals, increased body fat and muscle loss may cause BMI to underestimate body fat content.",
            },
            {
              id: "muscle",
              icon: "/assets/images/icon-muscle.svg",
              heading: "Muscle",
              text: "BMI may misclassify muscular individuals as overweight or obese, as it doesn't differentiate muscle from fat.",
            },
            {
              id: "pregnancy",
              icon: "/assets/images/icon-pregnancy.svg",
              heading: "Pregnancy",
              text: "Expectant mothers experience weight gain due to their growing baby. Maintaining a healthy pre-pregnancy BMI is advisable to minimise health risks for both mother and child.",
            },
            {
              id: "race",
              icon: "/assets/images/icon-race.svg",
              heading: "Race",
              text: "Certain health concerns may affect individuals of some Black and Asian origins at lower BMIs than others. To learn more, it is advised to discuss this with your GP or practice nurse.",
            },
          ].map((limitation) => {
            return (
              <article
                class="rounded-4 bg-pure-white p-6 shadow-layer-1 forced-colors:border-1 forced-colors:border-solid tablet:data-[limitation=age]:col-span-2 tablet:data-[limitation=gender]:col-span-2 tablet:data-[limitation=muscle]:col-span-2 tablet:data-[limitation=pregnancy]:col-span-2 tablet:data-[limitation=race]:col-span-2 tablet:data-[limitation=race]:col-start-2 desktop:col-span-2 desktop:p-8 desktop:data-[limitation=gender]:col-span-3 desktop:data-[limitation=age]:col-start-3 desktop:data-[limitation=gender]:col-start-4 desktop:data-[limitation=muscle]:col-start-5 desktop:data-[limitation=pregnancy]:col-start-2 desktop:data-[limitation=race]:col-start-4 desktop:data-[limitation=gender]:mr-24 desktop:data-[limitation=gender]:max-w-[calc((100%-4rem)/3*2+2rem)] desktop:data-[limitation=gender]:justify-self-end"
                data-limitation={limitation.id}
              >
                <div class="flex items-center gap-4">
                  <img alt="" src={limitation.icon} />
                  <h3 class="text-heading-s text-gunmetal">
                    {limitation.heading}
                  </h3>
                </div>
                <p class="mt-4">{limitation.text}</p>
              </article>
            );
          })
        }
      </div>
    </main>
    <template id="controls-metric">
      <MetricControls />
    </template>
    <template id="controls-imperial">
      <div class="tablet:mt-8">
        <fieldset
          class="m-0 mt-6 grid grid-cols-2 gap-4 border-none p-0 tablet:mt-0 tablet:gap-6"
        >
          <legend class="mb-2 text-dark-electric-blue">Height</legend>
          <TextField label="ft" name="height-ft" required />
          <TextField label="in" name="height-in" required />
        </fieldset>
        <fieldset
          class="m-0 mt-4 grid grid-cols-2 gap-4 border-none p-0 tablet:mt-6 tablet:gap-6"
        >
          <legend class="mb-2 text-dark-electric-blue">Weight</legend>
          <TextField label="st" name="weight-st" required />
          <TextField label="lbs" name="weight-lbs" required />
        </fieldset>
      </div>
    </template>
  </body>
</html>

<script>
  const form = document.getElementById("calculator-form") as HTMLFormElement;
  const controlsContainer = form.querySelector(
    "[data-form-controls]"
  ) as HTMLElement;
  const resultBmi = document.querySelector(
    "[data-form-result-bmi]"
  ) as HTMLElement;
  const resultClassification = document.querySelector(
    "[data-form-result-classification]"
  ) as HTMLElement;
  const resultIdeal = document.querySelector(
    "[data-form-result-ideal]"
  ) as HTMLElement;
  const metricTemplate = document.getElementById(
    "controls-metric"
  ) as HTMLTemplateElement;
  const imperialTemplate = document.getElementById(
    "controls-imperial"
  ) as HTMLTemplateElement;

  form.addEventListener("change", (e) => {
    if (e.target instanceof HTMLInputElement && e.target.name === "units") {
      const template =
        e.target.value === "metric" ? metricTemplate : imperialTemplate;
      const controls = template.content.cloneNode(true);

      controlsContainer.textContent = "";
      controlsContainer.append(controls);
    }
  });

  form.addEventListener("submit", (e) => {
    e.preventDefault();

    if (!(e.target instanceof HTMLFormElement)) {
      return;
    }

    const formData = new FormData(e.target);
    const parseResult = parseFormData(formData);
    if (typeof parseResult.error === "string") {
      throw new Error(parseResult.error);
    }

    const result = getResult(parseResult.data);

    resultBmi.textContent = result.bmi.toFixed(1);
    resultClassification.textContent = result.classification;
    if (result.units === "metric") {
      resultIdeal.textContent = `${result.idealWeight.lowest.toFixed(
        1
      )}kgs - ${result.idealWeight.highest.toFixed(1)}kgs`;
    } else {
      resultIdeal.textContent = `${Math.floor(
        result.idealWeight.lowest / 14
      )}st ${Math.floor(result.idealWeight.lowest % 14)}lbs - ${Math.floor(
        result.idealWeight.highest / 14
      )}st ${Math.floor(result.idealWeight.highest % 14)}lbs`;
    }
  });

  const parseFormData = (formData: FormData) => {
    const units = formData.get("units");
    if (units !== "metric" && units !== "imperial") {
      return { error: "Invalid unit" };
    }

    if (units === "metric") {
      const rawHeight = formData.get("height-cm");
      if (typeof rawHeight !== "string") {
        return { error: "Invalid height" };
      }
      const height = parseInt(rawHeight, 10);
      if (isNaN(height)) {
        return { error: "Invalid height" };
      }

      const rawWeight = formData.get("weight-kg");
      if (typeof rawWeight !== "string") {
        return { error: "Invalid weight" };
      }
      const weight = parseInt(rawWeight, 10);
      if (isNaN(weight)) {
        return { error: "Invalid weight" };
      }

      return { data: { units, cm: height, kg: weight } } as const;
    } else {
      const rawFt = formData.get("height-ft");
      if (typeof rawFt !== "string") {
        return { error: "Invalid height" };
      }
      const ft = parseInt(rawFt, 10);
      if (isNaN(ft)) {
        return { error: "Invalid height" };
      }

      const rawIn = formData.get("height-in");
      if (typeof rawIn !== "string") {
        return { error: "Invalid height" };
      }
      const _in = parseInt(rawIn, 10);
      if (isNaN(_in)) {
        return { error: "Invalid height" };
      }

      const rawSt = formData.get("weight-st");
      if (typeof rawSt !== "string") {
        return { error: "Invalid weight" };
      }
      const st = parseInt(rawSt, 10);
      if (isNaN(st)) {
        return { error: "Invalid weight" };
      }

      const rawLbs = formData.get("weight-lbs");
      if (typeof rawLbs !== "string") {
        return { error: "Invalid weight" };
      }
      const lbs = parseInt(rawLbs, 10);
      if (isNaN(lbs)) {
        return { error: "Invalid weight" };
      }

      return { data: { units, ft, in: _in, st, lbs } } as const;
    }
  };

  const getResult = (data: ParseData) => {
    const units = data.units;

    let bmi, idealWeight;
    if (units === "metric") {
      const m = data.cm / 100;
      const kg = data.kg;
      bmi = getBmiMetric(m, kg);
      idealWeight = getIdealWeightMetric(m);
    } else {
      const _in = data.ft * 12 + data.in;
      const lbs = data.st * 14 + data.lbs;
      bmi = getBmiImperial(_in, lbs);
      idealWeight = getIdealWeightImperial(_in);
    }

    const classification = getClassification(bmi);

    return { units, bmi, classification, idealWeight };
  };

  type ParseData<T = ReturnType<typeof parseFormData>["data"]> =
    T extends undefined ? never : T;

  const getBmiMetric = (m: number, kg: number) => {
    return kg / m ** 2;
  };

  const getBmiImperial = (_in: number, lbs: number) => {
    return (703 * lbs) / _in ** 2;
  };

  const getClassification = (bmi: number) => {
    if (bmi < 18.5) {
      return "underweight";
    } else if (bmi < 25) {
      return "a healthy weight";
    } else if (bmi < 30) {
      return "overweight";
    } else {
      return "obese";
    }
  };

  const getIdealWeightMetric = (m: number) => {
    const lowest = 18.5 * m ** 2;
    const highest = 25 * m ** 2;

    return {
      lowest,
      highest,
    };
  };

  const getIdealWeightImperial = (_in: number) => {
    const lowest = (18.5 / 703) * _in ** 2;
    const highest = (25 / 703) * _in ** 2;

    return {
      lowest,
      highest,
    };
  };
</script>
