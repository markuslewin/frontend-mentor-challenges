---
import "../styles/global.css";
import IconCompany from "../components/IconCompany.html";
import IconLocation from "../components/IconLocation.html";
import IconSearch from "../components/IconSearch.html";
import IconTwitter from "../components/IconTwitter.html";
import IconWebsite from "../components/IconWebsite.html";
import { getUser, parse } from "../data/user";

let username = "octocat";
let error: string | undefined;
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const result = parse(formData);
  if (typeof result.error === "string") {
    error = result.error;
  } else {
    username = result.data.username;
  }
}

const response = await getUser(username);
let user = response.data;
error = response.error?.message;
// todo: Move to template
let stats: {
  key: string;
  value: number;
}[] = [];
// todo: Move to template
let details: {
  id: string;
  key: string;
  icon: typeof IconCompany;
  value: string | null | undefined;
  href?: string | null;
}[] = [];
if (user) {
  stats = [
    {
      key: "Repos",
      value: user.public_repos,
    },
    {
      key: "Followers",
      value: user.followers,
    },
    {
      key: "Following",
      value: user.following,
    },
  ];

  details = [
    {
      id: "location",
      key: "Location",
      icon: IconLocation,
      value: user.location,
    },
    {
      id: "blog",
      key: "Blog",
      icon: IconWebsite,
      value: user.blog,
      href: user.blog,
    },
    {
      id: "twitter",
      key: "Twitter",
      icon: IconTwitter,
      value: user.twitter_username,
      href: user.twitter_username
        ? `https://twitter.com/${user.twitter_username}`
        : null,
    },
    {
      id: "company",
      key: "Company",
      icon: IconCompany,
      value: user.company,
      href: user.company
        ? `https://github.com/${
            user.company.startsWith("@") ? user.company.slice(1) : user.company
          }`
        : null,
    },
  ];
}
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/assets/favicon-32x32.png"
    />
    <title>Frontend Mentor | GitHub user search app</title>
  </head>
  <body>
    <div class="center region">
      <header class="header">
        <p class="header__title">devfinder</p>
        <!-- todo: "change to ..." name, toggle button? -->
        <form hidden>
          <button class="header__toggle" type="submit">
            Light <img alt="" src="/assets/icon-sun.svg" />
             Dark <img alt="" src="/assets/icon-moon.svg" />
          </button>
        </form>
      </header>
      <main>
        <div class="search">
          <h1 class="sr-only">Search a GitHub user</h1>
          <form class="search__control" method="post" data-search>
            <label class="search__icon" for="search-input">
              <!-- todo: sr-only -> alt -->
              <span class="sr-only">GitHub username</span>
              <IconSearch />
            </label>
            <input
              class="[ search__input ] [ shape ]"
              id="search-input"
              type="text"
              name="username"
              placeholder="Search GitHub usernameâ€¦"
              required
              aria-describedby="search-error"
            />
            <!-- todo: enhance with aria-live="polite" -->
            <p class="search__error" id="search-error">{error}</p>
            <button class="[ search__button ] [ shape ]" type="submit"
              >Search</button
            >
          </form>
        </div>
        {
          user && (
            // todo: `width`/`height` for `avatar_url`?
            <div class="result">
              <h2 class="sr-only">Result</h2>
              <div class="result__profile">
                <h3 class="result__name">
                  {user.name ? user.name : user.login}
                </h3>
                <p class="result__login">@{user.login}</p>
                <p class="result__joined">
                  Joined{" "}
                  {Intl.DateTimeFormat("en-GB", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  }).format(new Date(user.created_at))}
                </p>
              </div>
              <img class="result__avatar" alt="" src={user.avatar_url} />
              <div class="result__more">
                <p data-availability={user.bio ? "available" : "unavailable"}>
                  {user.bio ? user.bio : "This profile has no bio"}
                </p>
                <h4 class="sr-only" id="statistics-heading">
                  Statistics
                </h4>
                <ul
                  class="result__stats"
                  role="list"
                  aria-labelledby="statistics-heading"
                >
                  {stats.map((entry) => {
                    return (
                      <li>
                        <span class="result__key">
                          {entry.key}
                          <span class="sr-only">: </span>
                        </span>
                        {entry.value}
                      </li>
                    );
                  })}
                </ul>
                <h4 class="sr-only" id="details-heading">
                  Details
                </h4>
                <ul
                  class="result__details"
                  role="list"
                  aria-labelledby="details-heading"
                >
                  {details.map((detail) => {
                    return (
                      <li
                        class="result__detail"
                        data-id={detail.id}
                        data-availability={
                          detail.value ? "available" : "unavailable"
                        }
                      >
                        <detail.icon />
                        <span class="sr-only">{detail.key}:</span>{" "}
                        {detail.value ? (
                          detail.href ? (
                            <a href={detail.href}>{detail.value}</a>
                          ) : (
                            detail.value
                          )
                        ) : (
                          "Not Available"
                        )}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>
          )
        }
      </main>
    </div>
  </body>
</html>
