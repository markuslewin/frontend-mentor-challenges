---
import { z } from "astro/zod";
import Layout from "../layouts/Layout.astro";
import { GenerateSchema } from "../utils/generate-form";
import { generatePassword, getStrength } from "../utils/password";
import { Icon } from "../components/ui/icon";

const { errors, data, payload } = await (async function () {
  const { request } = Astro;

  if (request.method === "POST") {
    const formData = await request.formData();
    const payload = Object.fromEntries(formData);
    const result = GenerateSchema.safeParse(payload);
    if (!result.success) {
      return { payload, errors: result.error.formErrors };
    }

    const password = generatePassword(result.data);

    return { payload, data: { password } };
  }
  return { data: { password: "PTx1f5DaFX" } };
})();

const values = z
  .preprocess(
    (val) => (typeof val === "object" ? val : {}),
    z.object({
      length: z.coerce.number().default(10),
      "include-uppercase": z.coerce.boolean(),
      "include-lowercase": z.coerce.boolean(),
      "include-numbers": z.coerce.boolean(),
      "include-symbols": z.coerce.boolean(),
    })
  )
  .parse(payload);

const strength = getStrength(values);

if (errors) {
  // No UI
  console.warn({ errors });
}
---

<Layout title="Frontend Mentor | Password generator app">
  <main>
    <div class="min-h-screen">
      <div class="max-w-[33.75rem] mx-auto box-content p-4">
        <h1
          class="tablet:text-heading-m text-[1rem] leading-[1.3125rem] text-center"
        >
          Password Generator
        </h1>
        <section
          class="bg-dark-grey text-almost-white mt-4 tablet:mt-8 p-4 tablet:px-8 tablet:py-5 flex flex-wrap gap-4 justify-between items-center"
          aria-labelledby="result-heading"
        >
          <h2 class="sr-only" id="result-heading">Generated password</h2>
          <p class="text-heading-m tablet:text-heading-l">
            <output
              form="generate"
              id="result-password"
              aria-labelledby="result-heading"
            >
              {data?.password}
            </output>
          </p>
          <form id="result-copy-password" hidden>
            <p id="result-copy-message" aria-live="assertive"></p>
            <button class="text-neon-green">
              <span class="sr-only">Copy password</span>
              <Icon className="size-5" name="icon-copy" />
            </button>
          </form>
        </section>
        <section
          class="bg-dark-grey text-almost-white mt-4 tablet:mt-6 p-4 tablet:p-8 tablet:pt-6"
          aria-labelledby="settings-heading"
        >
          <h2 class="sr-only" id="settings-heading">Settings</h2>
          <form method="post" id="generate">
            <p>
              <label for="generate-length">Character Length</label>
              <input
                class="block w-full"
                id="generate-length"
                type="range"
                name="length"
                min="1"
                max="20"
                value={values.length}
              />
            </p>
            <div class="mt-8">
              {
                (
                  [
                    {
                      name: "include-uppercase",
                      text: "Include Uppercase Letters",
                    },
                    {
                      name: "include-lowercase",
                      text: "Include Lowercase Letters",
                    },
                    {
                      name: "include-numbers",
                      text: "Include Numbers",
                    },
                    {
                      name: "include-symbols",
                      text: "Include Symbols",
                    },
                  ] as const
                ).map((category) => {
                  const id = `generate-${category.name}`;
                  return (
                    <p class="mt-5">
                      <input
                        class="sr-only peer"
                        id={id}
                        type="checkbox"
                        name={category.name}
                        checked={values[category.name]}
                      />
                      <label
                        class="grid grid-cols-[max-content_1fr] gap-5 tablet:gap-6 items-center group"
                        for={id}
                      >
                        <span class="size-5 border-2 grid place-items-center group-hover:text-neon-green peer-focus-visible:group-[]:text-neon-green peer-focus-visible:group-[]:outline peer-focus-visible:group-[]:outline-offset-2 peer-checked:group-[]:bg-neon-green peer-checked:group-[]:text-neon-green">
                          <Icon
                            className="size-3 hidden peer-checked:group-[]:block peer-checked:group-[]:text-very-dark-grey"
                            name="icon-check"
                          />
                        </span>
                        {category.text}
                      </label>
                    </p>
                  );
                })
              }
            </div>
            <p
              class="bg-very-dark-grey py-[0.875rem] px-4 tablet:px-8 tablet:py-5 uppercase mt-8"
            >
              <output
                class="flex flex-wrap gap-4 justify-between items-center group"
                id="generate-strength"
                data-strength={strength.id}
                hidden
              >
                <label class="text-grey" for="generate-strength">Strength</label
                >
                <span class="flex gap-4 items-center">
                  <span
                    class="text-body tablet:text-heading-m"
                    id="generate-strength-value">{strength.text}</span
                  >
                  <span class="flex gap-2">
                    <span
                      class="border-2 group-data-[strength=too-weak]:text-red group-data-[strength=weak]:text-orange group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green border-t-[1.625rem] border-l-[0.5rem]"
                    ></span>
                    <span
                      class="w-[0.625rem] h-7 border-2 group-data-[strength=weak]:border-t-[1.625rem] group-data-[strength=weak]:border-l-[0.5rem] group-data-[strength=medium]:border-t-[1.625rem] group-data-[strength=medium]:border-l-[0.5rem] group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=weak]:text-orange group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green"
                    ></span>
                    <span
                      class="w-[0.625rem] h-7 border-2 group-data-[strength=medium]:border-t-[1.625rem] group-data-[strength=medium]:border-l-[0.5rem] group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green"
                    ></span>
                    <span
                      class="w-[0.625rem] h-7 border-2 group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=strong]:text-neon-green"
                    ></span>
                  </span>
                </span>
              </output>
            </p>
            <button
              class="mt-4 tablet:mt-8 bg-neon-green text-dark-grey uppercase w-full flex gap-4 tablet:gap-6 items-center shape-p-[1.0625rem] justify-center hocus:bg-transparent hocus:text-neon-green tablet:shape-p-5 shape-border-2 border-neon-green outline-offset-4"
            >
              Generate <Icon className="size-3" name="icon-arrow-right" />
            </button>
          </form>
        </section>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { GenerateSchema } from "../utils/generate-form";
  import { generatePassword, getStrength } from "../utils/password";

  let copyMessageTimeout: ReturnType<typeof setTimeout> | undefined;
  function setCopyMessage(message: string) {
    const $resultCopyMessage = document.getElementById("result-copy-message");
    if (!$resultCopyMessage) {
      return;
    }
    $resultCopyMessage.textContent = message;
    clearTimeout(copyMessageTimeout);
    copyMessageTimeout = setTimeout(() => {
      $resultCopyMessage.textContent = null;
    }, 7000);
  }

  (function () {
    const $resultCopyPassword = document.getElementById("result-copy-password");
    if (!$resultCopyPassword) {
      return;
    }

    $resultCopyPassword.addEventListener("submit", (event) => {
      event.preventDefault();
      const $resultPassword = document.getElementById("result-password");
      if (!$resultPassword) {
        return;
      }

      const password = $resultPassword.textContent?.trim();
      navigator.clipboard
        .writeText(password ?? "")
        .then(() => {
          setCopyMessage("Copied");
        })
        .catch(() => {});
    });
    $resultCopyPassword.hidden = false;
  })();

  (function () {
    const $generate = document.getElementById("generate");
    if (!($generate instanceof HTMLFormElement)) {
      return;
    }
    $generate.addEventListener("submit", (ev) => {
      const $resultPassword = document.getElementById("result-password");
      if (!$resultPassword) {
        return;
      }

      const formData = new FormData($generate);
      const result = GenerateSchema.safeParse(Object.fromEntries(formData));
      if (!result.success) {
        return;
      }

      const password = generatePassword(result.data);

      $resultPassword.textContent = password;
      ev.preventDefault();
    });
  })();

  (function () {
    const $generate = document.getElementById("generate");
    const $generateStrength = document.getElementById("generate-strength");
    if (!($generate instanceof HTMLFormElement) || !$generateStrength) {
      return;
    }
    $generate.addEventListener("input", () => {
      const $generateStrengthValue = document.getElementById(
        "generate-strength-value"
      );
      if (!$generateStrengthValue) {
        return;
      }

      const formData = new FormData($generate);
      const result = GenerateSchema.safeParse(Object.fromEntries(formData));
      if (!result.success) {
        return;
      }

      const strength = getStrength(result.data);

      $generateStrength.dataset.strength = strength.id;
      $generateStrengthValue.textContent = strength.text;
    });
    $generateStrength.hidden = false;
  })();

  (function () {
    const $range = document.getElementById("generate-length");
    if (!($range instanceof HTMLInputElement)) {
      return;
    }
    $range.addEventListener("input", () => {
      $range.style.setProperty("--value", $range.value);
    });
    $range.style.setProperty("--value", $range.value);
  })();
</script>
