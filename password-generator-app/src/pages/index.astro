---
import { z } from "astro/zod";
import Layout from "../layouts/Layout.astro";
import { GenerateSchema } from "../utils/generate-form";
import { generatePassword, getStrength } from "../utils/password";

const { errors, data, payload } = await (async function () {
  const { request } = Astro;

  if (request.method === "POST") {
    const formData = await request.formData();
    const payload = Object.fromEntries(formData);
    const result = GenerateSchema.safeParse(payload);
    if (!result.success) {
      return { payload, errors: result.error.formErrors };
    }

    const password = generatePassword(result.data);

    return { payload, data: { password } };
  }
  return { data: { password: "" } };
})();

const values = z
  .preprocess(
    (val) => (typeof val === "object" ? val : {}),
    z.object({
      length: z.coerce.number().default(10),
      "include-uppercase": z.coerce.boolean(),
      "include-lowercase": z.coerce.boolean(),
      "include-numbers": z.coerce.boolean(),
      "include-symbols": z.coerce.boolean(),
    })
  )
  .parse(payload);

const strength = getStrength(values);

if (errors) {
  // No UI
  console.warn({ errors });
}
---

<Layout title="Frontend Mentor | Password generator app">
  <main>
    <h1>Password Generator</h1>
    <section aria-labelledby="result-heading">
      <h2 id="result-heading">Generated password</h2>
      <p>
        <output
          form="generate"
          id="result-password"
          aria-labelledby="result-heading"
        >
          {data?.password}
        </output>
      </p>
      <form id="result-copy-password" hidden>
        <p id="result-copy-message" aria-live="assertive"></p>
        <button>
          <img alt="Copy password" src="/assets/images/icon-copy.svg" />
        </button>
      </form>
    </section>
    <section aria-labelledby="settings-heading">
      <h2 id="settings-heading">Settings</h2>
      <form method="post" id="generate">
        <p>
          <label for="generate-length">Character Length</label>
          <input
            id="generate-length"
            type="range"
            name="length"
            min="1"
            max="20"
            value={values.length}
          />
        </p>
        <p>
          <img alt="" src="/assets/images/icon-check.svg" />
          <input
            id="generate-include-uppercase"
            type="checkbox"
            name="include-uppercase"
            checked={values["include-uppercase"]}
          />
          <label for="generate-include-uppercase">
            Include Uppercase Letters
          </label>
        </p>
        <p>
          <input
            id="generate-include-lowercase"
            type="checkbox"
            name="include-lowercase"
            checked={values["include-lowercase"]}
          />
          <label for="generate-include-lowercase">
            Include Lowercase Letters
          </label>
        </p>
        <p>
          <input
            id="generate-include-numbers"
            type="checkbox"
            name="include-numbers"
            checked={values["include-numbers"]}
          />
          <label for="generate-include-numbers">Include Numbers</label>
        </p>
        <p>
          <input
            id="generate-include-symbols"
            type="checkbox"
            name="include-symbols"
            checked={values["include-symbols"]}
          />
          <label for="generate-include-symbols">Include Symbols</label>
        </p>
        <p>
          <output id="generate-strength" hidden>
            <label for="generate-strength">Strength</label>
            <span id="generate-strength-value">{strength}</span>
          </output>
        </p>
        <button>
          Generate <img alt="" src="/assets/images/icon-arrow-right.svg" />
        </button>
      </form>
    </section>
  </main>
</Layout>

<script>
  import { GenerateSchema } from "../utils/generate-form";
  import { generatePassword, getStrength } from "../utils/password";

  let copyMessageTimeout: ReturnType<typeof setTimeout> | undefined;
  function setCopyMessage(message: string) {
    const $resultCopyMessage = document.getElementById("result-copy-message");
    if (!$resultCopyMessage) {
      return;
    }
    $resultCopyMessage.textContent = message;
    clearTimeout(copyMessageTimeout);
    copyMessageTimeout = setTimeout(() => {
      $resultCopyMessage.textContent = null;
    }, 7000);
  }

  (function () {
    const $resultCopyPassword = document.getElementById("result-copy-password");
    if (!$resultCopyPassword) {
      return;
    }

    $resultCopyPassword.addEventListener("submit", (event) => {
      event.preventDefault();
      const $resultPassword = document.getElementById("result-password");
      if (!$resultPassword) {
        return;
      }

      const password = $resultPassword.textContent?.trim();
      navigator.clipboard
        .writeText(password ?? "")
        .then(() => {
          setCopyMessage("Copied");
        })
        .catch(() => {});
    });
    $resultCopyPassword.hidden = false;
  })();

  (function () {
    const $generate = document.getElementById("generate");
    if (!($generate instanceof HTMLFormElement)) {
      return;
    }
    $generate.addEventListener("submit", (ev) => {
      const $resultPassword = document.getElementById("result-password");
      if (!$resultPassword) {
        return;
      }

      const formData = new FormData($generate);
      const result = GenerateSchema.safeParse(Object.fromEntries(formData));
      if (!result.success) {
        return;
      }

      const password = generatePassword(result.data);

      $resultPassword.textContent = password;
      ev.preventDefault();
    });
  })();

  (function () {
    const $generate = document.getElementById("generate");
    const $generateStrength = document.getElementById("generate-strength");
    if (!($generate instanceof HTMLFormElement) || !$generateStrength) {
      return;
    }
    $generate.addEventListener("input", () => {
      const $generateStrengthValue = document.getElementById(
        "generate-strength-value"
      );
      if (!$generateStrengthValue) {
        return;
      }

      const formData = new FormData($generate);
      const result = GenerateSchema.safeParse(Object.fromEntries(formData));
      if (!result.success) {
        return;
      }

      const strength = getStrength(result.data);

      $generateStrengthValue.textContent = strength;
    });
    $generateStrength.hidden = false;
  })();
</script>
