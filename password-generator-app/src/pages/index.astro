---
import Layout from "../layouts/Layout.astro";
import {
  GenerateSchema,
  GenerateSchemaValues,
  validateCategories,
} from "../utils/generate-form";
import { generatePassword, getStrength } from "../utils/password";
import { Icon } from "../components/ui/icon";

const { errors, data, payload } = await (async function () {
  const { request } = Astro;

  if (request.method === "POST") {
    const formData = await request.formData();
    const payload = Object.fromEntries(formData);
    const result = GenerateSchema.safeParse(payload);
    if (!result.success) {
      return { payload, errors: result.error.formErrors };
    }

    const password = generatePassword(result.data);

    return { payload, data: { password } };
  }
  return { data: { password: "PTx1f5DaFX" } };
})();

const values = GenerateSchemaValues.parse(payload);

const strength = getStrength(values);
const isValid = validateCategories(values);

if (errors) {
  // No UI
  console.warn({ errors });
}
---

<Layout title="Frontend Mentor | Password generator app">
  <main>
    <div
      class="min-h-screen grid place-content-center px-4 py-16 tablet:pb-[7.9375rem] grid-cols-[minmax(auto,33.75rem)]"
    >
      <h1
        class="tablet:text-heading-m text-[1rem] leading-[1.3125rem] text-center"
      >
        Password Generator
      </h1>
      <section
        class="bg-dark-grey text-almost-white mt-4 tablet:mt-8 p-4 tablet:px-8 tablet:py-5 grid grid-cols-[1fr_max-content] gap-4 justify-between items-center"
        aria-labelledby="result-heading"
      >
        <h2 class="sr-only" id="result-heading">Generated password</h2>
        <p class="text-heading-m tablet:text-heading-l break-all">
          <output
            form="generate"
            id="result-password"
            aria-labelledby="result-heading"
          >
            {data?.password ?? "\u00A0"}
          </output>
        </p>
        <form id="result-copy-password" hidden>
          <div class="relative flex items-center">
            <p
              class="absolute -left-4 -translate-x-full text-neon-green uppercase bg-dark-grey/50 empty:opacity-0 transition-opacity"
              id="result-copy-message"
              aria-live="assertive"
            >
            </p>
            <button
              class="text-neon-green hocus:text-almost-white transition-colors clickable outline-offset-4"
              id="result-copy-button"
            >
              <span class="sr-only">Copy password</span>
              <Icon className="size-6" name="icon-copy" />
            </button>
          </div>
        </form>
      </section>
      <section
        class="bg-dark-grey text-almost-white mt-4 tablet:mt-6 p-4 tablet:p-8 tablet:pt-6"
        aria-labelledby="settings-heading"
      >
        <h2 class="sr-only" id="settings-heading">Settings</h2>
        <form method="post" id="generate">
          <p>
            <label
              class="flex gap-4 justify-between items-center capitalize"
              for="generate-length"
            >
              Character length
              <span
                class="text-heading-m tablet:text-heading-l text-neon-green"
                id="generate-length-value"
                aria-hidden="true"
                hidden
              >
                {values.length}
              </span>
            </label>
            <input
              class="block w-full mt-2 tablet:mt-4"
              id="generate-length"
              type="range"
              name="length"
              min="1"
              max="20"
              value={values.length}
            />
          </p>
          <div class="mt-[2.625rem]">
            {
              (
                [
                  {
                    name: "include-uppercase",
                    text: "Include Uppercase Letters",
                  },
                  {
                    name: "include-lowercase",
                    text: "Include Lowercase Letters",
                  },
                  {
                    name: "include-numbers",
                    text: "Include Numbers",
                  },
                  {
                    name: "include-symbols",
                    text: "Include Symbols",
                  },
                ] as const
              ).map((category) => {
                const id = `generate-${category.name}`;
                return (
                  <p class="mt-5">
                    <input
                      class="sr-only peer"
                      id={id}
                      type="checkbox"
                      name={category.name}
                      checked={values[category.name]}
                    />
                    <label
                      class="grid grid-cols-[max-content_1fr] gap-5 tablet:gap-6 items-center group"
                      for={id}
                    >
                      <span class="size-5 border-2 grid place-items-center group-hover:text-neon-green peer-focus-visible:group-[]:text-neon-green peer-focus-visible:group-[]:outline peer-focus-visible:group-[]:outline-offset-2 peer-checked:group-[]:bg-neon-green peer-checked:group-[]:text-neon-green transition-colors">
                        <Icon
                          className="size-[0.875rem] hidden peer-checked:group-[]:block peer-checked:group-[]:text-very-dark-grey"
                          name="icon-check"
                        />
                      </span>
                      {category.text}
                    </label>
                  </p>
                );
              })
            }
          </div>
          <p
            class="bg-very-dark-grey py-[0.875rem] px-4 tablet:px-8 tablet:py-5 uppercase mt-8 group"
            id="generate-strength"
            data-strength={strength.id}
            hidden
          >
            <output class="flex flex-wrap gap-4 justify-between items-center">
              <label class="text-grey" for="generate-strength">Strength</label>
              <span class="flex gap-4 items-center">
                <span
                  class="text-body tablet:text-heading-m"
                  id="generate-strength-value">{strength.text}</span
                >
                <span class="flex gap-2">
                  <span
                    class="border-2 group-data-[strength=too-weak]:text-red group-data-[strength=weak]:text-orange group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green border-t-[1.625rem] border-l-[0.5rem]"
                  ></span>
                  <span
                    class="w-[0.625rem] h-7 border-2 group-data-[strength=weak]:border-t-[1.625rem] group-data-[strength=weak]:border-l-[0.5rem] group-data-[strength=medium]:border-t-[1.625rem] group-data-[strength=medium]:border-l-[0.5rem] group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=weak]:text-orange group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green"
                  ></span>
                  <span
                    class="w-[0.625rem] h-7 border-2 group-data-[strength=medium]:border-t-[1.625rem] group-data-[strength=medium]:border-l-[0.5rem] group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=medium]:text-yellow group-data-[strength=strong]:text-neon-green"
                  ></span>
                  <span
                    class="w-[0.625rem] h-7 border-2 group-data-[strength=strong]:border-t-[1.625rem] group-data-[strength=strong]:border-l-[0.5rem] group-data-[strength=strong]:text-neon-green"
                  ></span>
                </span>
              </span>
            </output>
          </p>
          <button
            class="mt-4 tablet:mt-8 bg-neon-green transition-colors text-dark-grey uppercase w-full flex gap-4 tablet:gap-6 items-center shape-p-[1.0625rem] justify-center aria-[disabled=false]:hocus:bg-transparent aria-[disabled=false]:hocus:text-neon-green tablet:shape-p-5 shape-border-2 border-neon-green outline-offset-4 aria-disabled:opacity-50"
            id="generate-submit"
            aria-disabled={!isValid}
          >
            Generate <Icon className="size-3" name="icon-arrow-right" />
          </button>
        </form>
      </section>
    </div>
  </main>
</Layout>

<script>
  import {
    GenerateSchema,
    GenerateSchemaValues,
    validateCategories,
  } from "../utils/generate-form";
  import { generatePassword, getStrength } from "../utils/password";
  import { invariant } from "@epic-web/invariant";

  let copyMessageTimeout: ReturnType<typeof setTimeout> | undefined;
  function setCopyMessage(message: string) {
    try {
      const $resultCopyMessage = document.getElementById("result-copy-message");
      invariant($resultCopyMessage, "No copy message element");

      $resultCopyMessage.textContent = message;
      clearTimeout(copyMessageTimeout);
      copyMessageTimeout = setTimeout(() => {
        $resultCopyMessage.textContent = null;
      }, 5000);
    } catch (e) {
      console.error(e);
    }
  }

  // Copy password
  try {
    const $resultCopyPassword = document.getElementById("result-copy-password");
    invariant($resultCopyPassword, "No copy form");

    $resultCopyPassword.addEventListener("submit", async (event) => {
      event.preventDefault();

      const $resultPassword = document.getElementById("result-password");
      invariant($resultPassword, "No password element");

      const password = $resultPassword.textContent?.trim();
      await navigator.clipboard.writeText(password ?? "");
      setCopyMessage("Copied");
    });

    $resultCopyPassword.hidden = false;
  } catch (e) {
    console.error(e);
  }

  // Generate password
  try {
    const $generate = document.getElementById("generate");
    invariant($generate instanceof HTMLFormElement, "No form element");

    $generate.addEventListener("submit", (ev) => {
      const $resultPassword = document.getElementById("result-password");
      invariant($resultPassword, "No password element");

      const formData = new FormData($generate);
      const result = GenerateSchema.safeParse(Object.fromEntries(formData));
      if (!result.success) {
        ev.preventDefault();
        return;
      }

      const password = generatePassword(result.data);
      const $copyBtn = document.getElementById("result-copy-button");
      if ($copyBtn) {
        $copyBtn.focus();
      }
      $resultPassword.textContent = password;

      ev.preventDefault();
    });
  } catch (e) {
    console.error(e);
  }

  // Strength and button updates
  try {
    const $generate = document.getElementById("generate");
    invariant($generate instanceof HTMLFormElement, "No form element");
    const $generateStrength = document.getElementById("generate-strength");
    invariant($generateStrength, "No strength element");

    $generate.addEventListener("input", () => {
      const $generateStrengthValue = document.getElementById(
        "generate-strength-value"
      );
      invariant($generateStrengthValue, "No strength value element");
      const $generateButton = document.getElementById("generate-submit");
      invariant($generateButton, "No button element");

      const formData = new FormData($generate);
      const values = GenerateSchemaValues.parse(Object.fromEntries(formData));

      const strength = getStrength(values);
      const isValid = validateCategories(values);

      $generateStrength.dataset.strength = strength.id;
      $generateStrengthValue.textContent = strength.text;
      $generateButton.setAttribute("aria-disabled", String(!isValid));
    });

    $generateStrength.hidden = false;
  } catch (e) {
    console.error(e);
  }

  // Highlight chosen range
  try {
    const $range = document.getElementById("generate-length");
    invariant($range instanceof HTMLInputElement, "No range element");
    const $generateLengthValue = document.getElementById(
      "generate-length-value"
    );
    invariant($generateLengthValue, "No length value element");

    $range.addEventListener("input", () => {
      const { value } = $range;
      $range.style.setProperty("--value", value);
      $generateLengthValue.textContent = value;
    });
    // Give Chrome/Edge some time to restore the form when the user backs onto the page
    setTimeout(() => {
      const { value } = $range;
      $range.style.setProperty("--value", value);
      $generateLengthValue.textContent = value;
    }, 1);

    $generateLengthValue.hidden = false;
  } catch (e) {
    console.error(e);
  }
</script>
